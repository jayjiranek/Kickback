enum AttachmentType {
  IMAGE
  VIDEO
}

type Attachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  storageKey: String!
  type: AttachmentType!
  width: Int
  height: Int
  duration: Int
  messageID: ID! @index(name: "byMessage")
  chatroomID: ID! @index(name: "byChatRoom")
}

type Category @model @auth(rules: [{ allow: public }]) {
  id: ID!
  categoryName: String!
  categoryShortDescription: String!
  categoryLongDescription: String!
  categoryAvatarImage: String!
  categoryBannerImage: String!
  categoryGroupsCount: Int
  RoomTopics: [RoomTopic] @hasMany(indexName: "byRoomCategory", fields: ["id"])
}

type RoomTopic @model @auth(rules: [{ allow: public }]) {
  id: ID!
  topicName: String!
  categoryID: ID! @index(name: "byRoomCategory")
  topicAvatarImage: String!
  topicDescription: String!
  defaultTopicChatName: String!
  countGroupsNumber: Int
  ChatRooms: [ChatRoom] @hasMany(indexName: "byRoomTopic", fields: ["id"])
  BreakingNewsAlerts: [BreakingNewAlert]
    @hasMany(indexName: "byRoomTopic", fields: ["id"])
}

type ChatRoom @model @auth(rules: [{ allow: public }]) {
  id: ID!
  users: [User] @manyToMany(relationName: "UserChatRoom")
  LastMessage: Message @hasOne
  chatName: String!
  chatImage: String
  numMembers: Int
  maxNumMembers: String
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  UserActivity: [UserChatActivity]
    @hasMany(indexName: "byChatRoom", fields: ["id"])
  roomtopicID: ID! @index(name: "byRoomTopic")
  Votes: [Vote] @hasMany(indexName: "byChatRoom", fields: ["id"])
}

type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  text: String!
  createdAt: AWSDateTime
  userSenderID: ID! @index(name: "byUser")
  chatroomID: ID!
    @index(
      name: "byChatRoom"
      sortKeyFields: ["createdAt"]
      queryField: "listMessagesByChatRoom"
    )
  images: [String]
  Attachments: [Attachment] @hasMany(indexName: "byMessage", fields: ["id"])
}

type BreakingNewAlert @model @auth(rules: [{ allow: public }]) {
  id: ID!
  text: String!
  createdAt: AWSDateTime
  articleLink: AWSURL
  roomtopicID: ID!
    @index(
      name: "byRoomTopic"
      sortKeyFields: ["createdAt"]
      queryField: "listBreakingNewsAlertsByRoomTopic"
    )
}

enum ChatRoomVoteType {
  REMOVEUSER
  CHANGETITLE
  CHANGEPICTURE
}

type Vote @model @auth(rules: [{ allow: public }]) {
  id: ID!
  voteType: ChatRoomVoteType!
  createdAt: AWSDateTime!
  expiresAt: AWSDateTime!
  voteCreationUser: User @hasOne
  userToBeRemoved: User @hasOne
  newChatTitle: String
  newChatImage: String
  numYesVotesNeeded: Int!
  numYesVotes: Int!
  numNoVotes: Int!
  chatroomID: ID!
    @index(
      name: "byChatRoom"
      sortKeyFields: ["createdAt"]
      queryField: "listVotesByChatRoom"
    )
  userVotes: [UserVote] @hasMany(indexName: "byVote", fields: ["id"])
}

type UserVote @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime!
  voteID: ID!
    @index(
      name: "byVote"
      sortKeyFields: ["createdAt"]
      queryField: "listUserVotesByVote"
    )
  userVoteDecision: String!
  userVoterID: User @hasOne
}

type UserChatActivity @model @auth(rules: [{ allow: public }]) {
  id: ID!
  createdAt: AWSDateTime!
  chatroomID: ID!
    @index(
      name: "byChatRoom"
      sortKeyFields: ["createdAt"]
      queryField: "listUserActivityByChatRoom"
    )
  userID: User @hasOne
  activityType: String!
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  username: String
  profileImage: String
  ChatRooms: [ChatRoom] @manyToMany(relationName: "UserChatRoom")
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
}
